---
title: "End-to-End Data Science with RStudio Connect: Bike Share"
output:
  html_document:
    mathjax: null
    theme:
      version: 4
rmd_output_metadata:
  rsc_output_files:
    - "arrows.png"
resource_files:
  - "arrows.png"
---

`r gitlink::ribbon_css("https://github.com/sol-eng/bike_predict", text="View on GitHub")`

```{css, echo=FALSE}
.main-container {
    width: 100%;
    max-width: unset;
}

.main {
    max-width: 940px;
    margin-left: auto;
    margin-right: auto;
}

.jumbotron {
  color: white;
  background-image: url("https://source.unsplash.com/zbUH21c9ARk/1920x1080");
  background-position: center;
  background-repeat: no-repeat;
  background-size: cover;
  height: 50vh;
  /* filter: brightness(75%) */
}

#header {
  display: none
}
```

<div class="jumbotron jumbotron-fluid">
<div class="container">
<h1 class="display-3" color="#f0f0f0">Bike Share</h1>
<p class="lead">End-to-End Data Science with RStudio Connect</p>
</div>
</div>


```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(connectwidgets)
library(dplyr)
library(stringr)
library(metathis)

client <- connect()
all_content <- client %>% content()
bikeshare <- all_content %>% 
  by_tag("Bike Predict") %>%
  by_tag("R")
```

```{r}
meta() %>% 
  meta_description(description = "ETL, model serving, and app deployment--powered by RStudio Connect.") %>% 
  meta_viewport() %>% 
  meta_social(
    title = "End-to-end data science with RStudio Connect",
    # automatically supplied server url contains trailing slash
    url = paste0(Sys.getenv("CONNECT_SERVER"), "bike-share"),
    image = paste0(Sys.getenv("CONNECT_SERVER"), "bike-share", "/arrows.png"),
    image_alt = "Diagram of flow from scheduled jobs to apps",
    twitter_card_type = "summary",
    og_type = "article"
  )
```


<div class="main">

This project illustrates using RStudio Connect to deploy a data science project featuring:

### Scheduled jobs

- Fetching and cleaning data from a continuously updating web source
- Pushing cleaned data to a relational database
- Creating intermediate datasets for subsequent use

### Pins

- Serving intermediate datasets and model objects for use in apps, APIs, and other jobs

### APIs / Vetiver

- Serving model predictions via HTTP requests deployed using vetiver

### Development and Production Apps
  
- Exposing model predictions to end-users through Shiny and Dash apps
- Using git-backed deployment to keep a stable version of the application available from the main branch while doing development work on another branch

### Private Packages

- Encapsulate re-usable logic in an R package, and distribute with Package Manager (see <https://github.com/sol-eng/bikeHelpR>)

![](https://github.com/sol-eng/bike_predict/blob/main/img/arrows.drawio.png)

Explore the deployed items below:

## Scheduled Jobs {.tabset}

### ETL

```{r}
bikeshare %>% 
  by_tag("ETL") %>%
  filter(str_detect(title, "Step 1|Step 2")) %>%
  arrange(title) %>%
  rsc_card()
```

### Modeling

```{r}
bikeshare %>% 
  by_tag("Model") %>%
  filter(str_detect(title, "Step 1|Step 2")) %>%
  arrange(title) %>%
  rsc_card()
```

## Pins

```{r}
bikeshare %>%
  filter(str_detect(title, "Pinned")) %>%
  rsc_card()
```

## APIs

```{r}
bikeshare %>%
  by_tag("Model") %>%
  filter(str_detect(title, "API")) %>%
  rsc_card()
```

## Apps

```{r}
bikeshare %>%
  by_tag("App") %>%
  rsc_card()
```

</div>
